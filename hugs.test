<?php

/**
 * @file
 * Tests for hugs module.
 */
class HugsTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Hugs',
      'description' => 'Ensure that we can create legacy content',
      'group' => 'Hugability',
    );
  }

  public function setUp() {
    $this->buildAppStatTable();

    parent::setUp('hugs');  // Enable any modules required for the test
    $this->cronRun();
    // Create and log in our user
    $privileged_user = $this->drupalCreateUser(array('create application_status content'));
    $this->drupalLogin($privileged_user);
  }

  public function tearDown() {
    parent::tearDown('hugs');
  }

  public function testHugsCreateHuggedNode() {
    $this->destroyAppStatTable();

    $edit = array();
    $edit['title'] = $this->randomName(8);

    $this->drupalPost('node/add/application-status', $edit, t('Save'));
    $this->assertText(t('Application Status @title has been created.'));
    $this->outputScreenContents('After page creation', 'testHugsCreateHuggedNode');
  }

  // public function testHugsCreate() {
  //   $langcode = FIELD_LANGUAGE_NONE;
  //   $body_key = "body[$langcode][0][value]";
  //   // Create node to edit.
  //   $edit = array();
  //   $edit['title'] = $this->randomName(8);
  //   $edit[$body_key] = $this->randomName(16);
  //
  //   $this->drupalPost('node/add/mymodule', $edit, t('Save'));
  //   $this->assertText(t('mymodule page @title has been created.', array('@title' => $edit['title'])));
  //
  //   // For debugging we can output the page so it can be opened with a browser
  //   // Remove this line when the test has been debugged
  //   $this->outputScreenContents('After page creation', 'testMymoduleCreate');
  // }
  //
  // public function testHugsEdit() {
  //   $settings = array(
  //     'type' => 'mymodule',
  //     'title' => $this->randomName(32),
  //     'body' => array(FIELD_LANGUAGE_NONE => array(array($this->randomName(64)))),
  //   );
  //   $node = $this->drupalCreateNode($settings);
  //
  //   // For debugging, we might output the node structure with $this->pass()
  //   // $this->pass('Node created: ' . var_export($node,TRUE));
  //
  //   $edit_path = "node/{$node->nid}/edit";
  //   $this->drupalGet($edit_path);
  //   $this->assertFieldById('edit-body-zxx-0-summary','', 'Looking for edit-body-zxx-0-summary field as indication that we got to the edit page');
  //
  //   // For debugging we can output the page so it can be opened with a browser
  //   // Remove this line when the test has been debugged
  //   $this->outputScreenContents("After drupalGet($edit_path) in testMymoduleEdit", 'testMymoduleEdit');
  // }

  private function outputScreenContents($description, $basename) {
    // This is a hack to get a directory that won't be cleaned up by simpletest
    $file_dir = file_directory_path() .'/../simpletest_output_pages';
    if (!is_dir($file_dir)) {
      mkdir($file_dir, 0777, TRUE);
    }
    $output_path = "$file_dir/$basename." . $this->randomName(10) . '.html';
    $rv = file_put_contents($output_path, $this->drupalGetContent());
    $this->pass("$description: Contents of result page are ". l('here', $output_path));
  }

  private function buildAppStatTable() {
    db_query('create table if not exists legacy_dir_applicationstatuses (
      as_id int primary key not null auto_increment,
      as_name varchar(20) not null);');
  }
  private function destroyAppStatTable() {
    db_query('drop table legacy_dir_applicationstatuses;');
  }
}
<?php

/**
 * @file
 * Install file for hugs module.
 */

require_once('metadata.inc');
require_once('hugs.module');

ini_set('memory_limit', '500M');

function hugs_install() {
  drupal_install_schema('hugs');
}

function hugs_update_6101() {
  $all_metadata = get_metadata();
  $tables = _get_table_mapping();
  foreach ($tables as $drupal_table => $legacy_table) {
    $res = db_query("SELECT * FROM $legacy_table");
    while ($obj = db_fetch_object($res)) {
      hugs_insert_object($obj, $drupal_table, $legacy_table);
    }

    db_query("ANALYZE TABLE $drupal_table");
  }
}

function hugs_insert_object($obj, $drupal_table, $legacy_table) {
  $all_metadata = get_metadata();

  $node = new stdClass();
  $node->type = $drupal_table;
  $metadata = get_metadata($node);

  $nid = db_result(db_query("SELECT node.nid FROM node, $drupal_table as extra WHERE extra.refid = ". $obj->$metadata['primary_key'] ." AND node.type = '$drupal_table' AND node.nid = extra.nid"));
  if (!empty($nid)) {
    $node->nid = $nid;
    return hugs_load_without_friends($node);
  }
  else {
    $node->refid = $obj->$metadata['primary_key'];
    $node = hugs_load_without_friends($node);

    $node->uid = 1;
  }

  if ($metadata['belongs_to']) {
    foreach ($metadata['belongs_to'] as $drupal_attr => $legacy_attr) {
      $child_obj = db_fetch_object(db_query("SELECT * FROM ". $all_metadata['table_mapping'][$drupal_attr] ." WHERE ". $all_metadata['primary_key'][$drupal_attr] ." = ". $obj->$legacy_attr));
      if ($child_obj) {
        $child = hugs_insert_object($child_obj, $drupal_attr, $all_metadata['table_mapping'][$drupal_attr]);
        $node->$drupal_attr = $child->nid;
      }
    }
  }

  node_save($node);

  return $node;
}

function hugs_uninstall() {
  $tables = implode(', ', array_map(create_function('$v', 'return("\'".$v."\'");'), array_keys(_get_table_mapping())));

  db_query("DELETE FROM node_revisions WHERE nid IN (SELECT nid FROM node WHERE type IN ($tables))");
  db_query("DELETE FROM node WHERE type IN ($tables)");

  drupal_uninstall_schema('hugs');
}

function hugs_schema() {
  $schema = array();
  $tables = _get_table_mapping();

  foreach ($tables as $drupal_name => $legacy_name) {
    $schema[$drupal_name] = array(
      'description' => "Implementation of the " . titleize($drupal_name) . " table from the ASCCC database.",
      'fields' => _discover_table_schema($drupal_name),
      'primary key' => array('nid', 'vid'),
      'unique keys' => array(
        'refid' => array('refid', 'vid'),
      ),
      'indexes' => array(
        'nid' => array('nid'),
      ),
    );
    $indexes = _discover_indexes($drupal_name);
    foreach ($indexes as $index_name => $index) {
      $schema[$drupal_name]['indexes'][$index_name] = $index;
    }
  }

  return $schema;
}

function _discover_table_schema($drupal_name) {
  $pseudo = new stdClass();
  $pseudo->type = $drupal_name;
  $metadata = get_metadata($pseudo);

  $schema = array();

  // Add in nid, vid
  $schema['nid'] = array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'description' => t('Unique identifier.'),
    // 'auto_increment' => TRUE,
  );
  $schema['vid'] = array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'description' => t('Unique revision identifier.'),
    // 'auto_increment' => TRUE,
  );

  // Add in a refid
  $schema['refid'] = array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'description' => t('Unique legacy identifier.'),
  );

  // Add in any has_many/belongs_to relationships
  if ($metadata['belongs_to']) {
    foreach ($metadata['belongs_to'] as $drupal_name => $legacy_name) {
      $schema[$drupal_name] = array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => t('Foreign key to the %drupal_name table.', array('%drupal_name' => $drupal_name)),
      );
    }
  }
  // Add in any rw attributes (based on legacy schema?)

  return $schema;
}

function _discover_indexes($drupal_name) {
  $node = new stdClass();
  $node->type = $drupal_name;
  $metadata = get_metadata($node);

  $indexes = array();

  if ($metadata['belongs_to']) {
    foreach ($metadata['belongs_to'] as $drupal_name => $legacy_name) {
      $indexes[$drupal_name] = array($drupal_name);
    }
  }

  return $indexes;
}